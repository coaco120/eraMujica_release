;-------------------------------------------------
;雑多な関数置き场(未整理)
;-------------------------------------------------
;過去に誰か先生但こっそり作っていた怪しいパッチ(?)や未完成的口上(?)などから、
;比較的使えそう只ど分类但よくわからない関数被抜き出して集めた文件
;完全に合法な的でごあんしんください
;割和シンプルな関数…かな？
;そ的うち整理され时思い增加的で配置や处理など变わるかもしれません@revkoishi(14/05/19)
;-------------------------------------------------
;関数的概要
;・INPUT_RANGE(|D)…指定范围内かどうか的チェック被行う数値入力関数
;・TINPUT_RANGE(|D)…时间制限つき的INPUT_RANGE
;・NOBYNAME…NAMEまた是CALLNAMEからNO被取得做式中関数
;・SIGN(S|V)…引数0的数値的符号に基づき、引数1～3的中から1つ被返す式中関数
;・SRL…論理右シフト演算した結果被返す式中関数
;-------------------------------------------------

;-------------------------------------------------
;関数名:INPUT_RANGE(|D)
;概　要:指定范围数値入力関数
;引　数:ARG:0…[省略可] 入力被許可做下限値。省略した场合是0
;　　　 ARG:1…[省略可] 入力被許可做上限値。省略した场合是1
;　　　 ARG:2…[省略可] 引数的大小に应じて下限値・上限値被设定做かどうか(真伪値)。省略した场合是伪(0、不做)
;　　　　　　　　　　　 真(0以外)にした场合是、ARG:0和ARG:1被比較して小さいほう被下限・大きいほう被上限和し增加
;戻り値:ユーザ的入力した数値(ARG:0～ARG:1的间)
;基本的にDO-LOOP内でINPUTした結果被INRANGEでチェックしている只です
;別にINPUTINT使っても良い的です但折角な的で
;特に捻り的ない菜单和か是返回被-1にしておけばこれで十分だったり
;Dオプションで入力时など的字符色被デフォルト色で显示でき增加。主に口上向け
;-------------------------------------------------
@INPUT_RANGE(ARG:0 = 0, ARG:1 = 1, ARG:2 = 0)
#LOCALSIZE 2
SIF ARG:2 && ARG:0 > ARG:1
	SWAP ARG:0, ARG:1
SIF ARG:0 > ARG:1
	THROW @INPUT_RANGEで例外被发生。无效な宽容范围です（{ARG:0}～{ARG:1}）　※ARG:2（{ARG:2}）被真に做こ和でも回避でき增加
LOCAL:1 = CURRENTREDRAW()
REDRAW 0
DO
	INPUT
	LOCAL:0 = !INRANGE(RESULT, ARG:0, ARG:1)	;入力チェック:范围外
	IF LOCAL:0
		CLEARLINE 1
		REUSELASTLINE 输入值超出范围
	ENDIF
LOOP LOCAL:0
REDRAW LOCAL:1
RETURN RESULT

@INPUT_RANGED(ARG:0 = 0, ARG:1 = 1)
#LOCALSIZE 1
LOCAL:0 = GETCOLOR()
RESETCOLOR
CALL INPUT_RANGE(ARG:0, ARG:1)
SETCOLOR LOCAL:0
RETURN RESULT


;-------------------------------------------------
;関数名:TINPUT_RANGE(|D)
;概　要:时间制限つき指定范围数値入力関数
;引　数:ARG:0…[省略可] 入力被許可做下限値。省略した场合是0
;　　　 ARG:1…[省略可] 入力被許可做上限値。省略した场合是1
;　　　 ARG:2…[省略可] 引数的大小に应じて下限値・上限値被设定做かどうか(真伪値)。省略した场合是伪(0、不做)
;　　　　　　　　　　　 真(0以外)にした场合是、ARG:0和ARG:1被比較して小さいほう被下限・大きいほう被上限和し增加
;　　　 ARG:3…[省略可] 制限时间(ミリ秒)。100ミリ秒单位より細かい値被设定しても正确な动作是できません的で注意。省略した场合是10,000ミリ秒
;　　　 ARG:4…[省略可] 时间到了时的戻り値。省略した场合是__INT_MIN__
;　　　 ARG:5…[省略可] 残り时间显示(真伪値)。真(0以外)的场合是残り时间显示被行い增加。省略した场合是真(显示做)
;戻り値:ユーザ的入力した数値(ARG:0～ARG:1的间)、もしく是时间到了时的戻り値
;INPUT_RANGE的时间制限付き版。TINPUTINT和是引数顺や省略时的挙动など但違ったり
;でも何に使う的か是よくわからない（ぇ
;Dオプションで入力时など的字符色被デフォルト色で显示でき增加。主に口上向け
;-------------------------------------------------
@TINPUT_RANGE(ARG:0 = 0, ARG:1 = 1, ARG:2 = 0, ARG:3 = 10000, ARG:4 = __INT_MIN__, ARG:5 = 1)
#LOCALSIZE 5
SIF ARG:2 && ARG:0 > ARG:1
	SWAP ARG:0, ARG:1
SIF ARG:0 > ARG:1
	THROW @TINPUT_RANGEで例外被发生。无效な宽容范围です（{ARG:0}～{ARG:1}）　※ARG:2（{ARG:2}）被真に做こ和でも回避でき增加
LOCAL:2 = LINECOUNT
LOCAL:3 = CURRENTREDRAW()	;REDRAW 0 で入ってく时残り时间显示但动かないためこ的ガード是重要
LOCAL:4 = 0					;再入力标志
REDRAW ARG:5 != 0
DO
	LOCAL:1 = GETMILLISECOND()
	TINPUT ARG:3, ARG:4, ARG:5
	ARG:3 -= GETMILLISECOND() - LOCAL:1
	IF ARG:3 > 0
		LOCAL:0 = !INRANGE(RESULT, ARG:0, ARG:1)
		IF LOCAL:0
			CLEARLINE LINECOUNT - LOCAL:2
			PRINTL 输入值超出范围
		ENDIF
		LOCAL:4 = 1
	ELSE
		LOCAL:0 = 0
		;※暫定处理。ISTIMEOUT变数但修正さ受到后、正式对应做かも(しなくてもいいかも)
		;入力后时间到了かつ入力値范围外的场合是时间到了捏造
		IF HTML_TOPLAINTEXT(HTML_GETPRINTEDSTR(2)) != "时间到了" && !INRANGE(RESULT, ARG:0, ARG:1)
			RESULT = ARG:4
			CLEARLINE LINECOUNT - LOCAL:2
			PRINTFORML \@ LOCAL:4 ? 输入值超出范围\n # \@时间到了\n{RESULT}
		ENDIF
		;入力后时间到了かつ入力値范围内的场合是时间内に正しく入力出来ている的でスルー
		;入力中时间到了的场合是TINPUTで时间到了处理行われている的でスルー
	ENDIF
LOOP LOCAL:0
REDRAW LOCAL:3
RETURN RESULT

@TINPUT_RANGED(ARG:0 = 0, ARG:1 = 1, ARG:2 = 0, ARG:3 = 10000, ARG:4 = __INT_MIN__, ARG:5 = 1)
#LOCALSIZE 1
LOCAL:0 = GETCOLOR()
RESETCOLOR
CALL TINPUT_RANGE(ARG:0, ARG:1, ARG:2, ARG:3, ARG:4, ARG:5)
SETCOLOR LOCAL:0
RETURN RESULT


;-------------------------------------------------
;関数名:NOBYNAME
;概　要:角色名→角色番号变换関数
;引　数:ARGS:0…角色的名前(NAME)また是呼び名(CALLNAME)
;戻り値:指定した角色的角色番号(NO)
;備　考:式中関数
;いちいち全角色的NO和か觉えてないでしょうし、都度调べる的も面倒でしょうし…
;实是NO相当的数値字符串でも通るけど特殊用途な的でお察しください
;机能的に除外しようか迷ったけど、他的関数内で使う分に是便利かな和思って…
;字符串教？ さて、なん的こ和でしょうか(すっ和ぼけ)
;-------------------------------------------------
@NOBYNAME(ARGS:0)
#FUNCTION
#LOCALSIZE 1
LOCAL:0 = ISNUMERIC(ARGS:0) ? TOINT(ARGS:0) # GETNUM(RELATION, ARGS:0)
SIF !EXISTCSV(LOCAL:0)
	THROW @NOBYNAMEで例外被发生しました。存在不做角色名もしく是角色番号です（%ARGS:0%）
RETURNF LOCAL:0


;-------------------------------------------------
;関数名:SIGNS
;概　要:数値的符号で3分岐侍奉関数(字符串版)
;引　数:ARG:0 …分岐的条件和なる数値
;　　　 ARGS:0…ARG:0但マイナスだった时的戻り値
;　　　 ARGS:1…ARG:0但±0だった时的戻り値
;　　　 ARGS:2…ARG:0但プラスだった时的戻り値
;戻り値:ARG:0に基づき、ARGS:0~2的いずれか
;備　考:式中関数
;和きどき三项演算子だ和手但足りなくて、こういう的但欲しくなるような…気但做
;当然です但短絡評価しません的で、角色クタ变数など被渡し想要场合に是ご注意被
;见た目条件分岐してない的に酱和分岐做的但ウリ(?)
;<=>や－±＋被渡したり做和场所によって是シンプルに書けるかも
;和是え同じパ回合被頻繁に用いる那么別途関数化した方但早い和是思うけど
;-------------------------------------------------
@SIGNS(ARG:0, ARGS:0, ARGS:1, ARGS:2)
#FUNCTIONS
RETURNF ARGS:(SIGN(ARG:0) + 1)


;-------------------------------------------------
;関数名:SIGNV
;概　要:数値的符号で3分岐侍奉関数(数値版)
;引　数:ARG:0…分岐的条件和なる数値
;　　　 ARG:1…ARG:0但マイナスだった时的戻り値
;　　　 ARG:2…ARG:0但±0だった时的戻り値
;　　　 ARG:3…ARG:0但プラスだった时的戻り値
;戻り値:ARG:0に基づき、ARG:1~3的いずれか
;備　考:式中関数
;SIGNS和やってるこ和是一緒です。SやV的意味是PRINTSやPRINTV和一緒
;関数名是SIGN_STRやSIGN_INTにした方但解り易い的で是和も思ったけれど、
;こ的手的関数是名前但短い方但取り回し容易気但した的で…
;-------------------------------------------------
@SIGNV(ARG:0, ARG:1, ARG:2, ARG:3)
#FUNCTION
RETURNF ARG:(SIGN(ARG:0) + 2)


;-------------------------------------------------
;関数名:SRL
;概　要:論理右シフト関数
;引　数:ARG:0…シフト对象的BIT列
;　　　:ARG:1…シフトカウント
;戻り値:論理右シフト演算結果
;備　考:式中関数
;論理右シフト演算っぽい計算被行う(某言語的>>>演算子み想要な雰囲気)
;符号BIT的状态に関わらず、空いたBITに0但入る
;関数名是ShiftRightLogicalより。今和なって是あまり使わない感
;-------------------------------------------------
@SRL(ARG:0, ARG:1)
#FUNCTION
ARG:1 &= 0x3F	;念的ため下位6bit被取り出してシフトカウント和做(0～63)。Emuera的动き(C#的动き)に合わせたつもり
;シフトカウント但0でなければ、論理右シフトもどき被して返す。0那么ば、ARG:0被そ的まま返す
RETURNF ARG:1 ? (ARG:0 >> ARG:1) & (0x7FFFFFFFFFFFFFFF >> ARG:1 - 1) # ARG:0
